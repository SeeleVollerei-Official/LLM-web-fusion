import React, { useState } from 'react';
import { 
  User, Settings, PieChart, BarChart2, DollarSign, 
  LogOut, Edit, Save, X, Shield, BellRing, ChevronRight,
  Wallet, CreditCard, TrendingUp, Eye, EyeOff, AlertCircle
} from 'lucide-react';
import {
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,
  ResponsiveContainer, AreaChart, Area
} from 'recharts';

// 虚拟数据
const assetTrendData = [
  { month: '1月', assets: 220000 },
  { month: '2月', assets: 234000 },
  { month: '3月', assets: 245000 },
  { month: '4月', assets: 256789 }
];

const transactionData = [
  { month: '1月', income: 13000, expenses: 7800 },
  { month: '2月', income: 14500, expenses: 8200 },
  { month: '3月', income: 15000, expenses: 8500 },
  { month: '4月', income: 15000, expenses: 8500 }
];

const FinanceDashboard = () => {
  // 状态管理
  const [activeSection, setActiveSection] = useState('profile');
  const [isEditing, setIsEditing] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [notification, setNotification] = useState(null);
  const [loading, setLoading] = useState(false);

  // 用户数据
  const [userProfile, setUserProfile] = useState({
    name: '张明',
    email: 'zhangming@example.com',
    phone: '136****8765',
    avatar: '/api/placeholder/100/100',
    password: '********',
    securityEmail: 'zhangming@backup.com',
    notificationSettings: {
      emailNotification: true,
      smsNotification: true,
      pushNotification: false,
      monthlyReport: true
    }
  });

  // 财务数据
  const [financialSummary, setFinancialSummary] = useState({
    totalAssets: 256789.50,
    monthlyIncome: 15000,
    monthlyExpenses: 8500,
    investments: 120000,
    savings: 80000,
    creditCards: 5000,
    lastMonthGrowth: 4.5
  });

  const [editProfile, setEditProfile] = useState({...userProfile});
  const [errors, setErrors] = useState({});

  // 显示通知
  const showNotification = (message, type = 'success') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  // 表单验证
  const validateForm = () => {
    const newErrors = {};
    if (!editProfile.name.trim()) {
      newErrors.name = '姓名不能为空';
    }
    if (!editProfile.email.match(/^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/)) {
      newErrors.email = '请输入有效的邮箱地址';
    }
    if (!editProfile.phone.match(/^1[3-9]\d{9}$/)) {
      newErrors.phone = '请输入有效的手机号码';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // 处理输入变化
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setEditProfile(prev => ({
      ...prev,
      [name]: value
    }));
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // 保存资料
  const saveProfile = async () => {
    if (!validateForm()) {
      showNotification('请检查输入信息', 'error');
      return;
    }
    setLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setUserProfile(editProfile);
      setIsEditing(false);
      showNotification('个人资料更新成功！');
    } catch (error) {
      showNotification('保存失败，请重试', 'error');
    } finally {
      setLoading(false);
    }
  };

  // 取消编辑
  const cancelEdit = () => {
    setEditProfile({...userProfile});
    setIsEditing(false);
    setErrors({});
  };

  // 主界面渲染
  return (
    <div className="flex min-h-screen bg-gray-100">
      {/* 左侧导航栏 */}
      <div className="w-64 bg-white shadow-md">
        <div className="p-6 border-b">
          <div className="flex items-center justify-center mb-4">
            <img 
              src={userProfile.avatar} 
              alt="用户头像" 
              className="w-20 h-20 rounded-full"
            />
          </div>
          <h2 className="text-xl font-bold text-center">{userProfile.name}</h2>
          <p className="text-gray-500 text-center text-sm">个人理财管理</p>
        </div>
        <nav className="p-4">
          <ul className="space-y-2">
            <li 
              className={`flex items-center p-3 rounded cursor-pointer ${
                activeSection === 'profile' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
              }`}
              onClick={() => setActiveSection('profile')}
            >
              <User className="mr-3 h-5 w-5" /> 个人信息
            </li>
            <li 
              className={`flex items-center p-3 rounded cursor-pointer ${
                activeSection === 'financial-overview' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
              }`}
              onClick={() => setActiveSection('financial-overview')}
            >
              <PieChart className="mr-3 h-5 w-5" /> 财务总览
            </li>
            <li 
              className={`flex items-center p-3 rounded cursor-pointer ${
                activeSection === 'settings' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-50'
              }`}
              onClick={() => setActiveSection('settings')}
            >
              <Settings className="mr-3 h-5 w-5" /> 系统设置
            </li>
            <li className="flex items-center p-3 rounded cursor-pointer hover:bg-gray-50 text-red-500">
              <LogOut className="mr-3 h-5 w-5" /> 退出登录
            </li>
          </ul>
        </nav>
      </div>

      {/* 主内容区域 */}
      <div className="flex-1 overflow-y-auto">
        {activeSection === 'profile' && (
          <div className="p-6 space-y-6">
            <div className="flex justify-between items-center">
              <h2 className="text-2xl font-bold">个人信息</h2>
              {!isEditing && (
                <button 
                  onClick={() => setIsEditing(true)}
                  className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition flex items-center"
                >
                  <Edit className="w-4 h-4 mr-2" /> 编辑资料
                </button>
              )}
            </div>

            <div className="bg-white shadow-md rounded-lg p-6">
              {/* 个人信息表单 */}
              <div className="mb-6">
                <div className="flex items-center">
                  <img 
                    src={userProfile.avatar} 
                    alt="用户头像" 
                    className="w-24 h-24 rounded-full mr-6"
                  />
                  <div className="flex-1">
                    {!isEditing ? (
                      <>
                        <h3 className="text-2xl font-semibold">{userProfile.name}</h3>
                        <p className="text-gray-500">{userProfile.email}</p>
                      </>
                    ) : (
                      <div className="space-y-4">
                        <input 
                          type="text"
                          name="name"
                          value={editProfile.name}
                          onChange={handleInputChange}
                          className="w-full border rounded px-3 py-2"
                          placeholder="姓名"
                        />
                        <input 
                          type="email"
                          name="email"
                          value={editProfile.email}
                          onChange={handleInputChange}
                          className="w-full border rounded px-3 py-2"
                          placeholder="邮箱"
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* 编辑按钮组 */}
              {isEditing && (
                <div className="flex space-x-3">
                  <button 
                    onClick={saveProfile}
                    disabled={loading}
                    className={`${
                      loading ? 'bg-gray-400' : 'bg-green-500 hover:bg-green-600'
                    } text-white px-6 py-2 rounded transition flex items-center`}
                  >
                    <Save className="w-4 h-4 mr-2" />
                    {loading ? '保存中...' : '保存'}
                  </button>
                  <button 
                    onClick={cancelEdit}
                    className="bg-gray-500 text-white px-6 py-2 rounded hover:bg-gray-600 transition flex items-center"
                  >
                    <X className="w-4 h-4 mr-2" /> 取消
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {activeSection === 'financial-overview' && (
          <div className="p-6 space-y-6">
            {/* 财务总览内容 */}
            <h2 className="text-2xl font-bold">财务总览</h2>
            <div className="grid grid-cols-4 gap-6">
              <div className="bg-white shadow-md rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-500">总资产</span>
                  <Wallet className="text-blue-500" />
                </div>
                <p className="text-2xl font-bold">
                  ¥{financialSummary.totalAssets.toLocaleString()}
                </p>
              </div>
              
              <div className="bg-white shadow-md rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-500">月收入</span>
                  <TrendingUp className="text-green-500" />
                </div>
                <p className="text-2xl font-bold">
                  ¥{financialSummary.monthlyIncome.toLocaleString()}
                </p>
              </div>
              
              <div className="bg-white shadow-md rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-500">月支出</span>
                  <BarChart2 className="text-red-500" />
                </div>
                <p className="text-2xl font-bold">
                  ¥{financialSummary.monthlyExpenses.toLocaleString()}
                </p>
              </div>
              
              <div className="bg-white shadow-md rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-500">信用卡</span>
                  <CreditCard className="text-purple-500" />
                </div>
                <p className="text-2xl font-bold">
                  ¥{financialSummary.creditCards.toLocaleString()}
                </p>
              </div>
            </div>

            {/* 图表区域 */}
            <div className="bg-white shadow-md rounded-lg p-6">
              <h3 className="text-lg font-semibold mb-4">资产趋势</h3>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={assetTrendData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Area type="monotone" dataKey="assets" stroke="#3B82F6" fill="#93C5FD" />
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="bg-white shadow-md rounded-lg p-6">
              <h3 className="text-lg font-semibold mb-4">收支分析</h3>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={transactionData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="income" stroke="#10B981" name="收入" />
                    <Line type="monotone" dataKey="expenses" stroke="#EF4444" name="支出" />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default FinanceDashboard;